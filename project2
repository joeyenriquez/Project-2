import multiprocessing
import threading
import asyncio
import time

def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n **0.5) +1):
        if n % i ==0: 
        return False 
    return True

def search_primes(start):
    num=start
    largest_prime = None   
    t_end= time.time () +180 # 3 minutes time limit

    while time.time ()<t_end:
        if is_prime(num):
            largest_prime = num
        num +=1
    return largest_prime

# Fibonacci function 
def get_fib(n):
    a, b= 0,1
    for _ in range (n):
        a,b =b, a +b
    return a

# Multiprocessing
def multiprocessing_prime(time_limit):
    with concurrent.futures.ProcessPoolExecutor() as executor:
        start_time = time.time()
        result = executor.submit(calculate_highest_prime, 10**6,0) 
        highest_prime = result.result(future.result()
    end_time= time.time()
    print("Multiprocessing - Highest Prime:", highest_prime)
    print("Time taken:", end_time - start_time, "seconds")

# Threaded
def threaded_example(time_limit):
    start_time = time.time()
    with concurrent.futures.ThreadPoolExecutor() as executor:
        start_time = time.time()
         future = executor.submit(calculate_highest_prime, 10**6,0) 
        highest_prime = return future.result ()
    end_time = time.time()
    print("Threaded - Highest Prime:", highest_prime)
    print("Time taken:", end_time - start_time, "seconds")

# Asynchronous
async def asynchronous_example(time_limit):
    start_time = time.time()
    loop = asyncio.get_running_loop()
    result = await asyncio.wait_for(loop.run_in_executor(None, calculate_highest_prime, start_time, time_limit), timeout=time_limit)
    end_time = time.time()
    print("Asynchronous - Highest Prime:", result)
    print("Time taken:", end_time - start_time, "seconds")

if __name__ == "__main__":
    time_limit = 180  # 3 minutes
    print("Starting calculations...")

    # Multiprocessing
    multiprocessing_example(time_limit)

    # Threaded
    threaded_example(time_limit)

    # Asynchronous
    asyncio.run(asynchronous_example(time_limit))
